global sample_array[29]

probe process("cmp").begin {
    sample_array[0] = 19
    sample_array[1] = 19
    sample_array[2] = 19
    sample_array[3] = 19
    sample_array[4] = 19
    sample_array[5] = 19
    sample_array[6] = 19
    sample_array[7] = 19
    sample_array[8] = 19
    sample_array[9] = 19
    sample_array[10] = 19
    sample_array[11] = 19
    sample_array[12] = 19
    sample_array[13] = 19
    sample_array[14] = 19
    sample_array[15] = 19
    sample_array[16] = 19
    sample_array[17] = 19
    sample_array[18] = 19
    sample_array[19] = 19
    sample_array[20] = 19
    sample_array[21] = 19
    sample_array[22] = 19
    sample_array[23] = 19
    sample_array[24] = 19
    sample_array[25] = 19
    sample_array[26] = 19
    sample_array[27] = 19
    sample_array[28] = 19

    printf("cmp")
}

probe process("cmp").function("_Z10BubbleSortPii").call? {
    sample_array[0] ++
    if (sample_array[0] == 20) {
        printf("0 %s_Z10BubbleSortPii\n", thread_indent(1))
        sample_array[0] = 0
    }
}
probe process("cmp").function("_Z10BubbleSortPii").return? {
    if (sample_array[0] == 0) {
        printf("1 %s\n", thread_indent(-1))
    }
}

probe process("cmp").function("_Z10InsertSortPii").call? {
    sample_array[1] ++
    if (sample_array[1] == 20) {
        printf("0 %s_Z10InsertSortPii\n", thread_indent(1))
        sample_array[1] = 0
    }
}
probe process("cmp").function("_Z10InsertSortPii").return? {
    if (sample_array[1] == 0) {
        printf("1 %s\n", thread_indent(-1))
    }
}

probe process("cmp").function("_Z12BadPartitionPiii").call? {
    sample_array[2] ++
    if (sample_array[2] == 20) {
        printf("0 %s_Z12BadPartitionPiii\n", thread_indent(1))
        sample_array[2] = 0
    }
}
probe process("cmp").function("_Z12BadPartitionPiii").return? {
    if (sample_array[2] == 0) {
        printf("1 %s\n", thread_indent(-1))
    }
}

probe process("cmp").function("_Z12QuickSortBadPii").call? {
    sample_array[3] ++
    if (sample_array[3] == 20) {
        printf("0 %s_Z12QuickSortBadPii\n", thread_indent(1))
        sample_array[3] = 0
    }
}
probe process("cmp").function("_Z12QuickSortBadPii").return? {
    if (sample_array[3] == 0) {
        printf("1 %s\n", thread_indent(-1))
    }
}

probe process("cmp").function("_Z4SwapRiS_").call? {
    sample_array[4] ++
    if (sample_array[4] == 20) {
        printf("0 %s_Z4SwapRiS_\n", thread_indent(1))
        sample_array[4] = 0
    }
}
probe process("cmp").function("_Z4SwapRiS_").return? {
    if (sample_array[4] == 0) {
        printf("1 %s\n", thread_indent(-1))
    }
}

probe process("cmp").function("_Z4swapPiii").call? {
    sample_array[5] ++
    if (sample_array[5] == 20) {
        printf("0 %s_Z4swapPiii\n", thread_indent(1))
        sample_array[5] = 0
    }
}
probe process("cmp").function("_Z4swapPiii").return? {
    if (sample_array[5] == 0) {
        printf("1 %s\n", thread_indent(-1))
    }
}

probe process("cmp").function("_Z8HeapSortPii").call? {
    sample_array[6] ++
    if (sample_array[6] == 20) {
        printf("0 %s_Z8HeapSortPii\n", thread_indent(1))
        sample_array[6] = 0
    }
}
probe process("cmp").function("_Z8HeapSortPii").return? {
    if (sample_array[6] == 0) {
        printf("1 %s\n", thread_indent(-1))
    }
}

probe process("cmp").function("_Z9PartitionPiii").call? {
    sample_array[7] ++
    if (sample_array[7] == 20) {
        printf("0 %s_Z9PartitionPiii\n", thread_indent(1))
        sample_array[7] = 0
    }
}
probe process("cmp").function("_Z9PartitionPiii").return? {
    if (sample_array[7] == 0) {
        printf("1 %s\n", thread_indent(-1))
    }
}

probe process("cmp").function("_Z9QuickSortPii").call? {
    sample_array[8] ++
    if (sample_array[8] == 20) {
        printf("0 %s_Z9QuickSortPii\n", thread_indent(1))
        sample_array[8] = 0
    }
}
probe process("cmp").function("_Z9QuickSortPii").return? {
    if (sample_array[8] == 0) {
        printf("1 %s\n", thread_indent(-1))
    }
}

probe process("cmp").function("_Z9repairTopPiii").call? {
    sample_array[9] ++
    if (sample_array[9] == 20) {
        printf("0 %s_Z9repairTopPiii\n", thread_indent(1))
        sample_array[9] = 0
    }
}
probe process("cmp").function("_Z9repairTopPiii").return? {
    if (sample_array[9] == 0) {
        printf("1 %s\n", thread_indent(-1))
    }
}

probe process("cmp").function("main").call? {
    sample_array[10] ++
    if (sample_array[10] == 20) {
        printf("0 %smain\n", thread_indent(1))
        sample_array[10] = 0
    }
}
probe process("cmp").function("main").return? {
    if (sample_array[10] == 0) {
        printf("1 %s\n", thread_indent(-1))
    }
}

probe process("cmp").mark("array__create")? {
    sample_array[11] ++
    if (sample_array[11] == 20) {
        printf("2 %s array__create\n", thread_indent(0))
        sample_array[11] = 0
    }
}

probe process("cmp").mark("array__end")? {
    sample_array[12] ++
    if (sample_array[12] == 20) {
        printf("2 %s array__end\n", thread_indent(0))
        sample_array[12] = 0
    }
}

probe process("cmp").mark("cmethod__deconstruct")? {
    sample_array[13] ++
    if (sample_array[13] == 20) {
        printf("2 %s cmethod__deconstruct\n", thread_indent(0))
        sample_array[13] = 0
    }
}

probe process("cmp").mark("cmethod__entry")? {
    sample_array[14] ++
    if (sample_array[14] == 20) {
        printf("3 %s cmethod__entry\n", thread_indent(0))
        sample_array[14] = 0
    }
}

probe process("cmp").mark("cmethod__return")? {
    if (sample_array[14] == 0) {
        printf("4 %s cmethod__return\n", thread_indent(0))
    }
}

probe process("cmp").mark("find__require__begin")? {
    sample_array[15] ++
    if (sample_array[15] == 20) {
        printf("2 %s find__require__begin\n", thread_indent(0))
        sample_array[15] = 0
    }
}

probe process("cmp").mark("find__require__entry")? {
    sample_array[16] ++
    if (sample_array[16] == 20) {
        printf("3 %s find__require__entry\n", thread_indent(0))
        sample_array[16] = 0
    }
}

probe process("cmp").mark("find__require__return")? {
    if (sample_array[16] == 0) {
        printf("4 %s find__require__return\n", thread_indent(0))
    }
}

probe process("cmp").mark("gc__mark__begin")? {
    sample_array[17] ++
    if (sample_array[17] == 20) {
        printf("3 %s gc__mark__begin\n", thread_indent(0))
        sample_array[17] = 0
    }
}

probe process("cmp").mark("gc__mark__end")? {
    if (sample_array[17] == 0) {
        printf("4 %s gc__mark__end\n", thread_indent(0))
    }
}

probe process("cmp").mark("gc__sweep__begin")? {
    sample_array[18] ++
    if (sample_array[18] == 20) {
        printf("3 %s gc__sweep__begin\n", thread_indent(0))
        sample_array[18] = 0
    }
}

probe process("cmp").mark("gc__sweep__end")? {
    if (sample_array[18] == 0) {
        printf("4 %s gc__sweep__end\n", thread_indent(0))
    }
}

probe process("cmp").mark("hash__create")? {
    sample_array[19] ++
    if (sample_array[19] == 20) {
        printf("2 %s hash__create\n", thread_indent(0))
        sample_array[19] = 0
    }
}

probe process("cmp").mark("load__entry")? {
    sample_array[20] ++
    if (sample_array[20] == 20) {
        printf("3 %s load__entry\n", thread_indent(0))
        sample_array[20] = 0
    }
}

probe process("cmp").mark("load__return")? {
    if (sample_array[20] == 0) {
        printf("4 %s load__return\n", thread_indent(0))
    }
}

probe process("cmp").mark("method__cache__clear")? {
    sample_array[21] ++
    if (sample_array[21] == 20) {
        printf("2 %s method__cache__clear\n", thread_indent(0))
        sample_array[21] = 0
    }
}

probe process("cmp").mark("method__entry")? {
    sample_array[22] ++
    if (sample_array[22] == 20) {
        printf("3 %s method__entry\n", thread_indent(0))
        sample_array[22] = 0
    }
}

probe process("cmp").mark("method__return")? {
    if (sample_array[22] == 0) {
        printf("4 %s method__return\n", thread_indent(0))
    }
}

probe process("cmp").mark("object__create")? {
    sample_array[23] ++
    if (sample_array[23] == 20) {
        printf("2 %s object__create\n", thread_indent(0))
        sample_array[23] = 0
    }
}

probe process("cmp").mark("parse__begin")? {
    sample_array[24] ++
    if (sample_array[24] == 20) {
        printf("3 %s parse__begin\n", thread_indent(0))
        sample_array[24] = 0
    }
}

probe process("cmp").mark("parse__end")? {
    if (sample_array[24] == 0) {
        printf("4 %s parse__end\n", thread_indent(0))
    }
}

probe process("cmp").mark("raise")? {
    sample_array[25] ++
    if (sample_array[25] == 20) {
        printf("2 %s raise\n", thread_indent(0))
        sample_array[25] = 0
    }
}

probe process("cmp").mark("require__entry")? {
    sample_array[26] ++
    if (sample_array[26] == 20) {
        printf("3 %s require__entry\n", thread_indent(0))
        sample_array[26] = 0
    }
}

probe process("cmp").mark("require__return")? {
    if (sample_array[26] == 0) {
        printf("4 %s require__return\n", thread_indent(0))
    }
}

probe process("cmp").mark("string__create")? {
    sample_array[27] ++
    if (sample_array[27] == 20) {
        printf("2 %s string__create\n", thread_indent(0))
        sample_array[27] = 0
    }
}

probe process("cmp").mark("symbol__create")? {
    sample_array[28] ++
    if (sample_array[28] == 20) {
        printf("3 %s symbol__create\n", thread_indent(0))
        sample_array[28] = 0
    }
}

probe process("cmp").mark("symbol__deconstruct")? {
    if (sample_array[28] == 0) {
        printf("4 %s symbol__deconstruct\n", thread_indent(0))
    }
}

probe process("cmp").end {
    printf("cmp")
}
