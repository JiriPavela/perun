global sample_array[11]

probe process("cmp").begin {
    sample_array[0] = 9
    sample_array[1] = 9
    sample_array[2] = 9
    sample_array[3] = 9
    sample_array[4] = 9
    sample_array[5] = 9
    sample_array[6] = 9
    sample_array[7] = 9
    sample_array[8] = 9
    sample_array[9] = 9
    sample_array[10] = 9

    printf("cmp")
}

probe process("cmp").function("_Z10BubbleSortPii").call? {
    sample_array[0] ++
    if (sample_array[0] == 10) {
        printf("0 %s_Z10BubbleSortPii\n", thread_indent(1))
        sample_array[0] = 0
    }
}
probe process("cmp").function("_Z10BubbleSortPii").return? {
    if (sample_array[0] == 0) {
        printf("1 %s\n", thread_indent(-1))
    }
}

probe process("cmp").function("_Z10InsertSortPii").call? {
    sample_array[1] ++
    if (sample_array[1] == 10) {
        printf("0 %s_Z10InsertSortPii\n", thread_indent(1))
        sample_array[1] = 0
    }
}
probe process("cmp").function("_Z10InsertSortPii").return? {
    if (sample_array[1] == 0) {
        printf("1 %s\n", thread_indent(-1))
    }
}

probe process("cmp").function("_Z12BadPartitionPiii").call? {
    sample_array[2] ++
    if (sample_array[2] == 10) {
        printf("0 %s_Z12BadPartitionPiii\n", thread_indent(1))
        sample_array[2] = 0
    }
}
probe process("cmp").function("_Z12BadPartitionPiii").return? {
    if (sample_array[2] == 0) {
        printf("1 %s\n", thread_indent(-1))
    }
}

probe process("cmp").function("_Z12QuickSortBadPii").call? {
    sample_array[3] ++
    if (sample_array[3] == 10) {
        printf("0 %s_Z12QuickSortBadPii\n", thread_indent(1))
        sample_array[3] = 0
    }
}
probe process("cmp").function("_Z12QuickSortBadPii").return? {
    if (sample_array[3] == 0) {
        printf("1 %s\n", thread_indent(-1))
    }
}

probe process("cmp").function("_Z4SwapRiS_").call? {
    sample_array[4] ++
    if (sample_array[4] == 10) {
        printf("0 %s_Z4SwapRiS_\n", thread_indent(1))
        sample_array[4] = 0
    }
}
probe process("cmp").function("_Z4SwapRiS_").return? {
    if (sample_array[4] == 0) {
        printf("1 %s\n", thread_indent(-1))
    }
}

probe process("cmp").function("_Z4swapPiii").call? {
    sample_array[5] ++
    if (sample_array[5] == 10) {
        printf("0 %s_Z4swapPiii\n", thread_indent(1))
        sample_array[5] = 0
    }
}
probe process("cmp").function("_Z4swapPiii").return? {
    if (sample_array[5] == 0) {
        printf("1 %s\n", thread_indent(-1))
    }
}

probe process("cmp").function("_Z8HeapSortPii").call? {
    sample_array[6] ++
    if (sample_array[6] == 10) {
        printf("0 %s_Z8HeapSortPii\n", thread_indent(1))
        sample_array[6] = 0
    }
}
probe process("cmp").function("_Z8HeapSortPii").return? {
    if (sample_array[6] == 0) {
        printf("1 %s\n", thread_indent(-1))
    }
}

probe process("cmp").function("_Z9PartitionPiii").call? {
    sample_array[7] ++
    if (sample_array[7] == 10) {
        printf("0 %s_Z9PartitionPiii\n", thread_indent(1))
        sample_array[7] = 0
    }
}
probe process("cmp").function("_Z9PartitionPiii").return? {
    if (sample_array[7] == 0) {
        printf("1 %s\n", thread_indent(-1))
    }
}

probe process("cmp").function("_Z9QuickSortPii").call? {
    sample_array[8] ++
    if (sample_array[8] == 10) {
        printf("0 %s_Z9QuickSortPii\n", thread_indent(1))
        sample_array[8] = 0
    }
}
probe process("cmp").function("_Z9QuickSortPii").return? {
    if (sample_array[8] == 0) {
        printf("1 %s\n", thread_indent(-1))
    }
}

probe process("cmp").function("_Z9repairTopPiii").call? {
    sample_array[9] ++
    if (sample_array[9] == 10) {
        printf("0 %s_Z9repairTopPiii\n", thread_indent(1))
        sample_array[9] = 0
    }
}
probe process("cmp").function("_Z9repairTopPiii").return? {
    if (sample_array[9] == 0) {
        printf("1 %s\n", thread_indent(-1))
    }
}

probe process("cmp").function("main").call? {
    sample_array[10] ++
    if (sample_array[10] == 10) {
        printf("0 %smain\n", thread_indent(1))
        sample_array[10] = 0
    }
}
probe process("cmp").function("main").return? {
    if (sample_array[10] == 0) {
        printf("1 %s\n", thread_indent(-1))
    }
}

probe process("cmp").end {
    printf("cmp")
}
